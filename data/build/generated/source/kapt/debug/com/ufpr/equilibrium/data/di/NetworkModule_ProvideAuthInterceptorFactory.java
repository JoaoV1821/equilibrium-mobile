// Generated by Dagger (https://dagger.dev).
package com.ufpr.equilibrium.data.di;

import com.ufpr.equilibrium.data.network.AuthInterceptor;
import com.ufpr.equilibrium.domain.auth.TokenProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class NetworkModule_ProvideAuthInterceptorFactory implements Factory<AuthInterceptor> {
  private final Provider<TokenProvider> tokenProvider;

  public NetworkModule_ProvideAuthInterceptorFactory(Provider<TokenProvider> tokenProvider) {
    this.tokenProvider = tokenProvider;
  }

  @Override
  public AuthInterceptor get() {
    return provideAuthInterceptor(tokenProvider.get());
  }

  public static NetworkModule_ProvideAuthInterceptorFactory create(
      Provider<TokenProvider> tokenProvider) {
    return new NetworkModule_ProvideAuthInterceptorFactory(tokenProvider);
  }

  public static AuthInterceptor provideAuthInterceptor(TokenProvider tokenProvider) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideAuthInterceptor(tokenProvider));
  }
}
